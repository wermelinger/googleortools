// STEP 1: Clean SudokuProgram / SudokuSolver

// PASTE: 

using ConstraintOptimization3.Data;
using System;

namespace ConstraintOptimizationSudoku
{
    class SudokuProgram
    {
        static void Main(string[] args)
        {
            int[] initialGrid = { 0, 4, 0,   0, 6, 0,   0, 1, 0,
                                  7, 0, 0,   5, 0, 3,   0, 0, 2,
                                  0, 0, 3,   0, 2, 0,   7, 0, 0,

                                  0, 9, 0,   0, 7, 0,   0, 5, 0,
                                  1, 0, 2,   8, 0, 6,   4, 0, 3,
                                  0, 6, 0,   0, 3, 0,   0, 2, 0,

                                  0, 0, 4,   0, 1, 0,   6, 0, 0,
                                  6, 0, 0,   7, 0, 2,   0, 0, 1,
                                  0, 7, 0,   0, 5, 0,   0, 3, 0 };

            var sudoku = new Sudoku(initialGrid);
            var solver = new SudokuSolver();
            var solution = solver.Solve(sudoku);

            Console.WriteLine(solution.ToString());
        }
    }
}
// => Helper classes for Sudoku and SudokuSolver


================================================================


// PASTE
            // Initialize field 9x9
            var field = new IntVar[9][];
            for (int x = 0; x < field.Length; x++)
            {
                field[x] = new IntVar[9];
            }

// => Initialize field variables for the solver: two dimensional array (jagged)








// PASTE
            var model = new CpModel();

            // Constraint: Every cell contains a number 1-9
            for (int x = 0; x < field.Length; x++)
            {
                for (int y = 0; y < field[x].Length; y++)
                {
                    // TODO: Add constraint for each field
                }
            }





// TYPE
                    field[x][y] = model.NewIntVar(1, 9, $"{x}-{y}");








// PASTE

            // Solve
            var solver = new CpSolver();
            var status = solver.Solve(model);

            var solution = new List<int>();
            if (status == CpSolverStatus.Optimal)
            {
                for (int y = 0; y < 9; y++)
                {
                    for (int x = 0; x < 9; x++)
                    {
                        solution.Add((int)solver.Value(field[x][y]));
                    }
                }

                return new Sudoku(solution);
            }
// => RUN: Just takes the first feasible solution. Number of possible solution would be this big number from ppt
















// PASTE
            // Constraints: all cells in each column contain a different value
            for(int x = 0; x < field.Length;x++)
            {
                // hint: 2 dimensional array -> list of y-positions must be different 
                var yPositions = field[x];
                model.AddAllDifferent(yPositions);
            }
// => RUN	At least every column is correct. rows / regions not		
			
			
			
			
			
			
			
			
			
			
	

// PASTE
            // Constraint: all cells in each row contain a different value
            for (int y = 0; y < field[0].Length; y++)
            {
                var row = new IntVar[9];
                for (int x = 0; x < field.Length; x++)
                {
                    row[x] = field[x][y];
                }
                model.AddAllDifferent(row);
            }
// => RUN All columns and rows correct			










// PASTE
            // Constraint: all cells in each region contain a different value
            for (int xBegin = 0; xBegin < 7; xBegin += 3)
            {
                for (int yBegin = 0; yBegin < 7; yBegin += 3)
                {
                    var region = new List<IntVar>();
                    for (int xOffset = 0; xOffset < 3; xOffset++)
                    {
                        for (int yOffset = 0; yOffset < 3; yOffset++)
                        {
                            region.Add(field[xBegin + xOffset][yBegin + yOffset]);
                        }
                    }
                    model.AddAllDifferent(region);
                }
            }
// => RUN









// PASTE
            // Add constraints of our specific sudoku
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    if (sudoku.GetCell(x, y) != 0)
                    {
                        model.Add(field[x][y] == sudoku.GetCell(x, y));
                    }
                }
            }
// => RUN Load the data 




			




================================================================

using System;
using System.Collections.Generic;
using ConstraintOptimization3.Data;
using Google.OrTools.Sat;

namespace ConstraintOptimizationSudoku
{
    public class SudokuSolver
    {
        public Sudoku Solve(Sudoku sudoku)
        {
            // Initialize field 9x9
            var field = new IntVar[9][];
            for (int x = 0; x < field.Length; x++)
            {
                field[x] = new IntVar[9];
            }

            var model = new CpModel();

            // Constraint: Every cell contains a number 1-9
            for (int x = 0; x < field.Length; x++)
            {
                for (int y = 0; y < field[x].Length; y++)
                {
                    // TODO: Add constraint for each field
                    field[x][y] = model.NewIntVar(1, 9, $"{x}-{y}");
                }
            }

            // Constraints: all cells in each column contain a different value
            for (int x = 0; x < field.Length; x++)
            {
                // hint: 2 dimensional array -> list of y-positions must be different 
                var yPositions = field[x];
                model.AddAllDifferent(yPositions);
            }

            // Constraint: all cells in each row contain a different value
            for (int y = 0; y < field[0].Length; y++)
            {
                var row = new IntVar[9];
                for (int x = 0; x < field.Length; x++)
                {
                    row[x] = field[x][y];
                }
                model.AddAllDifferent(row);
            }

            // Constraint: all cells in each region contain a different value
            for (int xBegin = 0; xBegin < 7; xBegin += 3)
            {
                for (int yBegin = 0; yBegin < 7; yBegin += 3)
                {
                    var region = new List<IntVar>();
                    for (int xOffset = 0; xOffset < 3; xOffset++)
                    {
                        for (int yOffset = 0; yOffset < 3; yOffset++)
                        {
                            region.Add(field[xBegin + xOffset][yBegin + yOffset]);
                        }
                    }
                    model.AddAllDifferent(region);
                }
            }

            // Add constraints of our specific sudoku
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
                    if (sudoku.GetCell(x, y) != 0)
                    {
                        model.Add(field[x][y] == sudoku.GetCell(x, y));
                    }
                }
            }

            // Solve
            var solver = new CpSolver();
            var status = solver.Solve(model);

            var solution = new List<int>();
            if (status == CpSolverStatus.Optimal)
            {
                for (int y = 0; y < 9; y++)
                {
                    for (int x = 0; x < 9; x++)
                    {
                        solution.Add((int)solver.Value(field[x][y]));
                    }
                }

                return new Sudoku(solution);
            }

            throw new InvalidOperationException("Sudoku not solvable");
        }
    }
}}