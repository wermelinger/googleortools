// STEP 1: Clean SudokuSolver / Set as Startup project

// SHOW: 

using System;
using ConstraintOptimizationSudoku.Data;

namespace ConstraintOptimizationSudoku
{
    class SudokuProgram
    {
        static void Main(string[] args)
        {
            int[] initialGrid = { 0, 4, 0,   0, 6, 0,   0, 1, 0,
                                  7, 0, 0,   5, 0, 3,   0, 0, 2,
                                  0, 0, 3,   0, 2, 0,   7, 0, 0,

                                  0, 9, 0,   0, 7, 0,   0, 5, 0,
                                  1, 0, 2,   8, 0, 6,   4, 0, 3,
                                  0, 6, 0,   0, 3, 0,   0, 2, 0,

                                  0, 0, 4,   0, 1, 0,   6, 0, 0,
                                  6, 0, 0,   7, 0, 2,   0, 0, 1,
                                  0, 7, 0,   0, 5, 0,   0, 3, 0 };

            var sudoku = new Sudoku(initialGrid);
            var solver = new SudokuSolver();
            var solution = solver.Solve(sudoku);

            Console.WriteLine(solution.ToString());
        }
    }
}

// => Helper classes for Sudoku and SudokuSolver
// => PPT


================================================================


// PASTE
            // Initialize fields 9x9
            var fields = new IntVar[9][];
            for (int x = 0; x < fields.Length; x++)
            {
                fields[x] = new IntVar[9];
            }

// => Initialize fields variables for the solver model: two dimensional array (jagged). 
//    The variables can be used for constraints and the solver can determine feasible values for them








// PASTE
            var model = new CpModel();

            // Constraint: Every cell contains a number 1-9
            for (int x = 0; x < 9; x++)
            {
                for (int y = 0; y < 9; y++)
                {
					// TODO: Add constraint for each field
                }
            }			



// TYPE
                fields[x][y] = model.NewIntVar(1, 9, $"{x}-{y}");

// => Create solver variables for each cell and add a constraint 1-9







// PASTE

            // Solve
            var solver = new CpSolver();
            var status = solver.Solve(model);
            if (status == CpSolverStatus.Optimal)
            {
                var solution = FieldsHelper.GetFieldValuesFromSolver(solver, fields);
                return new Sudoku(solution);
            }

// => RUN: Just takes the first feasible solution. Number of possible solution would be this big number from ppt
//    If we would want to print more feasible solutions, we would again add a callback and let the solver work
















// PASTE
            // Constraints: all cells in each column contain a different value
            foreach (var column in FieldsHelper.GetColumns(fields))
            {
                // TODO: Add constraint: each value in the column is different
            }
// 
			
			
			
			
			
			
			
			
// TYPE			
				model.AddAllDifferent(column);
				
// => RUN	At least every column is correct. rows / regions not					
			
			
			
			
			
	

// PASTE
            // Constraint: all cells in each row contain a different value
            foreach (var row in FieldsHelper.GetRows(fields))
            {
                model.AddAllDifferent(row);
            }
// => RUN All columns and rows correct			










// PASTE
            // Constraint: all cells in each box contain a different value
            foreach (var box in FieldsHelper.GetBoxes(fields))
            {
                model.AddAllDifferent(box);
            }
// => RUN All boxes are correct => valid generic Sudoku model









// PASTE
            // Add constraints of our specific sudoku
            foreach (var cell in sudoku.GetCellsWithValue())
            {
                model.Add(fields[cell.X][cell.Y] == cell.Value);
            }
// => RUN Load the data and add constraints for our specific sudoku




			




================================================================

using System;
using ConstraintOptimizationSudoku.Data;
using Google.OrTools.Sat;

namespace ConstraintOptimizationSudoku
{
    public class SudokuSolver
    {
        public Sudoku Solve(Sudoku sudoku)
        {
            // Initialize fields 9x9
            var fields = new IntVar[9][];
            for (int x = 0; x < fields.Length; x++)
            {
                fields[x] = new IntVar[9];
            }

            var model = new CpModel();

            // Constraint: Every cell contains a number 1-9
            foreach (var cell in sudoku.GetAllCells())
            {
                fields[cell.X][cell.Y] = model.NewIntVar(1, 9, $"{cell.X}-{cell.Y}");
            }

            // Constraints: all cells in each column contain a different value
            foreach (var column in FieldsHelper.GetColumns(fields))
            {
                model.AddAllDifferent(column);
            }

            // Constraint: all cells in each row contain a different value
            foreach (var row in FieldsHelper.GetRows(fields))
            {
                model.AddAllDifferent(row);
            }

            // Constraint: all cells in each box contain a different value
            foreach (var box in FieldsHelper.GetBoxes(fields))
            {
                model.AddAllDifferent(box);
            }

            // Add constraints of our specific sudoku
            foreach (var cell in sudoku.GetCellsWithValue())
            {
                model.Add(fields[cell.X][cell.Y] == cell.Value);
            }

            // Solve
            var solver = new CpSolver();
            var status = solver.Solve(model);
            if (status == CpSolverStatus.Optimal)
            {
                var solution = FieldsHelper.GetFieldValuesFromSolver(solver, fields);
                return new Sudoku(solution);
            }

            throw new InvalidOperationException("Sudoku not solvable");
        }
    }
}